From: Ondrej Holy <oholy@redhat.com>
Date: Wed, 12 May 2021 10:19:56 +0200
Subject: admin: Make the privileged group configurable

Currently, `wheel` group is hardcoded in the `.rules` file which is there
to prevent redundant password prompt when starting gvfsd-admin. The Debian
based systems obviously uses `sudo` group instead of `wheel`. Let's make
the privileged group configurable.

Bug: https://gitlab.gnome.org/GNOME/gvfs/-/issues/565
Origin: upstream, 1.49.0, commit:141eee12c5c6c37e098cef2f1a80d1df58168d5b
---
 daemon/meson.build                          | 11 +++++++++--
 daemon/org.gtk.vfs.file-operations.rules    | 13 -------------
 daemon/org.gtk.vfs.file-operations.rules.in | 13 +++++++++++++
 meson.build                                 |  4 +++-
 meson_options.txt                           |  1 +
 5 files changed, 26 insertions(+), 16 deletions(-)
 delete mode 100644 daemon/org.gtk.vfs.file-operations.rules
 create mode 100644 daemon/org.gtk.vfs.file-operations.rules.in

diff --git a/daemon/meson.build b/daemon/meson.build
index dffeef3..c89ef40 100644
--- a/daemon/meson.build
+++ b/daemon/meson.build
@@ -374,8 +374,15 @@ if enable_admin
     install_dir: gvfs_datadir / 'polkit-1/actions',
   )
 
-  install_data(
-    gvfs_namespace + '.file-operations.rules',
+  rules = gvfs_namespace + '.file-operations.rules'
+
+  rules_conf = configuration_data()
+  rules_conf.set('PRIVILEGED_GROUP', privileged_group)
+
+  configure_file(
+    input: rules + '.in',
+    output: rules,
+    configuration: rules_conf,
     install_dir: gvfs_datadir / 'polkit-1/rules.d',
   )
 endif
diff --git a/daemon/org.gtk.vfs.file-operations.rules b/daemon/org.gtk.vfs.file-operations.rules
deleted file mode 100644
index fb13732..0000000
--- a/daemon/org.gtk.vfs.file-operations.rules
+++ /dev/null
@@ -1,13 +0,0 @@
-// Allows users belonging to wheel group to start gvfsd-admin without
-// authorization. This prevents redundant password prompt when starting
-// gvfsd-admin. The gvfsd-admin causes another password prompt to be shown
-// for each client process using the different action id and for the subject
-// based on the client process.
-polkit.addRule(function(action, subject) {
-        if ((action.id == "org.gtk.vfs.file-operations-helper") &&
-            subject.local &&
-            subject.active &&
-            subject.isInGroup ("wheel")) {
-            return polkit.Result.YES;
-        }
-});
diff --git a/daemon/org.gtk.vfs.file-operations.rules.in b/daemon/org.gtk.vfs.file-operations.rules.in
new file mode 100644
index 0000000..a3a2f64
--- /dev/null
+++ b/daemon/org.gtk.vfs.file-operations.rules.in
@@ -0,0 +1,13 @@
+// Allows users belonging to privileged group to start gvfsd-admin without
+// authorization. This prevents redundant password prompt when starting
+// gvfsd-admin. The gvfsd-admin causes another password prompt to be shown
+// for each client process using the different action id and for the subject
+// based on the client process.
+polkit.addRule(function(action, subject) {
+        if ((action.id == "org.gtk.vfs.file-operations-helper") &&
+            subject.local &&
+            subject.active &&
+            subject.isInGroup ("@PRIVILEGED_GROUP@")) {
+            return polkit.Result.YES;
+        }
+});
diff --git a/meson.build b/meson.build
index 57ed5aa..af80b29 100644
--- a/meson.build
+++ b/meson.build
@@ -299,6 +299,7 @@ endif
 config_h.set('HAVE_GCR', enable_gcr)
 
 # *** Check if we should build with admin backend ***
+privileged_group = get_option('privileged_group')
 enable_admin = get_option('admin')
 if enable_admin
   libcap_dep = dependency('libcap')
@@ -493,7 +494,8 @@ meson.add_install_script(
 summary({
   'systemduserunitdir': systemd_systemduserunitdir,
   'tmpfilesdir': systemd_tmpfilesdir,
-}, section: 'Directories')
+  'privileged_group': privileged_group,
+}, section: 'Configuration')
 
 summary({
   'admin': enable_admin,
diff --git a/meson_options.txt b/meson_options.txt
index 32f10d4..5059161 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -1,5 +1,6 @@
 option('systemduserunitdir', type: 'string', value: '', description: 'custom directory for systemd user units, or \'no\' to disable')
 option('tmpfilesdir', type: 'string', value: '', description: 'custom directory for tmpfiles.d config files, or \'no\' to disable')
+option('privileged_group', type: 'string', value: 'wheel', description: 'custom name for group that has elevated permissions')
 
 option('admin', type: 'boolean', value: true, description: 'build with admin backend')
 option('afc', type: 'boolean', value: true, description: 'build with afc backend and volume monitor')
